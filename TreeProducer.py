import ROOT
import math 
import numpy as np


root_dtype = {
  float: 'D',  int: 'I',  bool: 'O',
  'f':   'D',  'i': 'I',  '?':  'O',  'b': 'b'
}
num_dtype = {
  'D':   'f',  'I': 'i',  'O':  '?',  'b': 'b'
}

class TreeProducer(object):

    def __init__(self, name):
        print 'TreeProducer is called', name

        # TREE
        self.outputfile = ROOT.TFile(name, 'RECREATE')
        self.tree = ROOT.TTree('tree','tree')
        
        # HISTOGRAM
        self.pileup = ROOT.TH1F('pileup', 'pileup', 100,0,100)
        self.events = ROOT.TH1F('Events', 'Events', 1,0,1)
        self.eecutflow = ROOT.TH1F('eecutflow', 'eecutflow', 10,0,10)
        self.eecutflow_inc = ROOT.TH1F('eecutflow_inc', 'eecutflow_inc', 10,0,10)
        self.mmcutflow = ROOT.TH1F('mmcutflow', 'mmcutflow', 10,0,10)
        self.mmcutflow_inc = ROOT.TH1F('mmcutflow_inc', 'mmcutflow_inc', 10,0,10)
        self.nncutflow = ROOT.TH1F('nncutflow', 'nncutflow', 10,0,10)
        self.nncutflow_inc = ROOT.TH1F('nncutflow_inc', 'nncutflow_inc', 10,0,10)
        self.LHEScaleWeight_hist = ROOT.TH1F('LHEScaleWeight','LHEScaleWeight',10,0,10)
        self.LHEPdfWeight_hist = ROOT.TH1F('LHEPdfWeight','LHEPdfWeight',40,0,40)
        self.original = ROOT.TH1F('Original', 'Original',1,0,1)
        ##################
        # trees branches #
        ##################
        self.addBranch('isMC', bool)
        self.addBranch('is2016', bool)
        self.addBranch('is2017', bool)
        self.addBranch('is2018', bool)
        self.addBranch('EventNumber', int)
        self.addBranch('LumiNumber', int)
        self.addBranch('RunNumber', int)
        self.addBranch('EventWeight', float)
        self.addBranch('TopWeight', float)
        self.addBranch('BTagAK8Weight', float)
        self.addBranch('BTagAK4Weight', float)
        self.addBranch('BTagAK8Weight_deep', float)
        self.addBranch('BTagAK8Weight_deep_up', float)
        self.addBranch('BTagAK8Weight_deep_down', float)
        self.addBranch('BTagAK4Weight_deep', float)
        self.addBranch('BTagAK4Weight_deep_up', float)
        self.addBranch('BTagAK4Weight_deep_down', float)
        self.addBranch('BBTagWeight', float)
        self.addBranch('GenWeight', float)
        self.addBranch('PUWeight', float)
        self.addBranch('LeptonWeight', float)
        self.addBranch('LeptonWeightUp', float)
        self.addBranch('LeptonWeightDown', float)
        self.addBranch('TriggerWeight', float)
        self.addBranch('TriggerWeightUp', float)
        self.addBranch('TriggerWeightDown', float)
        self.addBranch('QCDNLO_Corr', float)
        self.addBranch('QCDNNLO_Corr', float)
        self.addBranch('EWKNLO_Corr', float)
        self.addBranch('isZtoMM', bool)
        self.addBranch('isZtoEE', bool)
        self.addBranch('isZtoNN', bool)
        self.addBranch('isTtoEM', bool)
        self.addBranch('isHtobb', bool)
        self.addBranch('isHtobb_ml', bool)
        self.addBranch('isMaxBTag_loose', bool)
        self.addBranch('isMaxBTag_medium', bool)
        self.addBranch('isMaxBTag_tight', bool)
        self.addBranch('isBoosted4B', bool)
        self.addBranch('isVBF', bool)
        self.addBranch('nPV', int)
        self.addBranch('nTaus', int)
        self.addBranch('nElectrons', int)
        self.addBranch('nMuons', int)
        self.addBranch('nJets', int)
        self.addBranch('nFatJets', int)
        self.addBranch('DPhi', float)
        self.addBranch('DEta', float)
        self.addBranch('MinDPhi', float)
        self.addBranch('MaxBTag', float)
        self.addBranch('BtagDeepB', float)
        self.addBranch('DeepTagMD_H4qvsQCD', float)
        self.addBranch('DeepTagMD_HbbvsQCD', float)
        self.addBranch('DeepTagMD_ZHbbvsQCD', float)
        self.addBranch('DeepTagMD_ZbbvsQCD', float)
        self.addBranch('DeepTagMD_bbvsLight', float)
        self.addBranch('DeepTagMD_WvsQCD', float)
        self.addBranch('DeepTagMD_ZvsQCD', float)
        self.addBranch('Mu1_pt', float)
        self.addBranch('Mu1_eta', float)
        self.addBranch('Mu1_phi', float)
        self.addBranch('Mu1_mass', float)
        self.addBranch('Mu1_pfIsoId', float)
        self.addBranch('Mu1_relIso', float)
        self.addBranch('Mu1_highPtId', float)
        self.addBranch('Mu2_pt', float)
        self.addBranch('Mu2_eta', float)
        self.addBranch('Mu2_phi', float)
        self.addBranch('Mu2_mass', float)
        self.addBranch('Mu2_pfIsoId', float)
        self.addBranch('Mu2_relIso', float)
        self.addBranch('Mu2_highPtId', float)
        self.addBranch('Ele1_pt', float)
        self.addBranch('Ele1_eta', float)
        self.addBranch('Ele1_phi', float)
        self.addBranch('Ele1_mass', float)
        self.addBranch('Ele2_pt', float)
        self.addBranch('Ele2_eta', float)
        self.addBranch('Ele2_phi', float)
        self.addBranch('Ele2_mass', float)
        self.addBranch('Ele_HEM15_16', float)
        self.addBranch('Jet1_VBF_pt', float)
        self.addBranch('Jet1_VBF_eta', float)
        self.addBranch('Jet1_VBF_phi', float)
        self.addBranch('Jet1_VBF_mass', float)
        self.addBranch('Jet2_VBF_pt', float)
        self.addBranch('Jet2_VBF_eta', float)
        self.addBranch('Jet2_VBF_phi', float)
        self.addBranch('Jet2_VBF_mass', float)
        self.addBranch('dijet_VBF_mass', float)
        self.addBranch('deltaR_VBF', float)
        self.addBranch('deltaR_HVBFjet1', float)
        self.addBranch('deltaR_HVBFjet2', float)
        self.addBranch('HT_HEM15_16', float)
        self.addBranch('LHEScaleWeight', float)
        self.addBranch('LHEPdfWeight', float)
        self.addBranch('LHEWeight_originalXWGTUP', float)
        self.addBranch('PrefireWeight', float)
        self.addBranch('PrefireWeightUp', float)
        self.addBranch('PrefireWeightDown', float)
        self.addBranch('HT', float)
        self.addBranch('MET', float)
        self.addBranch('MET_chs', float)
        self.addBranch('H_pt', float)
        self.addBranch('H_eta', float)
        self.addBranch('H_phi', float)
        self.addBranch('H_mass', float)
        self.addBranch('H_M', float)
        self.addBranch('H_tau21', float)
        self.addBranch('H_tau41', float)
        self.addBranch('H_tau42', float)
        self.addBranch('H_tau31', float)
        self.addBranch('H_tau32', float)
        self.addBranch('H_ddt', float)
        self.addBranch('H_csv1', float)
        self.addBranch('H_csv2', float,)
        self.addBranch('H_deepcsv1', float)
        self.addBranch('H_deepcsv2', float)
        self.addBranch('H_dbt', float)
        self.addBranch('H_hadronflavour', float)
        self.addBranch('H_partonflavour', float)
        self.addBranch('H_chf', float)
        self.addBranch('H_nhf', float)
        self.addBranch('V_pt', float)
        self.addBranch('V_eta', float)
        self.addBranch('V_phi', float)
        self.addBranch('V_mass', float)
        self.addBranch('VH_deltaR', float)
        self.addBranch('X_pt', float)
        self.addBranch('X_eta', float)
        self.addBranch('X_phi', float)
        self.addBranch('X_mass', float)
        self.addBranch('X_mass_chs', float)
        self.addBranch('X_mass_nom', float)
        self.addBranch('X_mass_jesUp', float)
        self.addBranch('X_mass_jesDown', float)
        self.addBranch('X_mass_jerUp', float)
        self.addBranch('X_mass_jerDown', float)
        self.addBranch('X_mass_MET_nom', float)
        self.addBranch('X_mass_MET_jesUp', float)
        self.addBranch('X_mass_MET_jesDown', float)
        self.addBranch('X_mass_MET_jerUp', float)
        self.addBranch('X_mass_MET_jerDown', float)
        self.addBranch('H_mass_nom', float)
        self.addBranch('H_mass_jmsUp', float)
        self.addBranch('H_mass_jmsDown', float)
        self.addBranch('H_mass_jmrUp', float)
        self.addBranch('H_mass_jmrDown', float)
      
    def addBranch(self, name, dtype=float):
        """Add branch with a given name, and create an array of the same name as address."""
        if hasattr(self,name):
          print "ERROR! TreeProducer.addBranch: Branch of name '%s' already exists!"%(name)
          exit(1)
        setattr(self,name,np.zeros(1,dtype=dtype))
        self.tree.Branch(name, getattr(self,name), '%s/%s'%(name,root_dtype[dtype]))
